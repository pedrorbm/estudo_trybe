# Conceito de conjuntos:

As implementações de conjuntos, nas linguagens, seguem as definições matemáticas de conjuntos, portanto, iremos revê-las. Para a matemática, um conjunto é uma coleção bem definida de elementos. Essa definição pode se dar por meio da listagem explícita dos elementos ou por meio da descrição dos elementos que o compõem:

EX:

# Listagem explícita:
# A = {1, 2, 3, 4, 5, 6}

# Descrição dos elementos
# B = {x | x é um número inteiro tal que 0 < x =< 6}
# Ou seja, x, onde x é um número inteiro tal que x menor igual a 6 e maior que
# zero. Ou seja, faz parte desse conjunto números maiores que 0 e menores
# iguais a 6 ({1, 2, 3, 4, 5, 6}).

* As duas formas de descrever o conjunto acima resultam em conjuntos iguais, o que é fácil perceber. Porém, o conceito de igualdade entre conjuntos vai além: conjuntos são iguais se cada elemento de A pertence a B e se cada elemento de B pertence a A. Quais conjuntos abaixo são iguais?

EX:

A = {1, 2, 3}
B = {2, 1, 3}
C = {1, 1, 2, 2, 3, 3}

Os três conjuntos são iguais. O que nos leva a duas propriedades:

A ordem não importa;

É desnecessário manter cópias do mesmo elemento. Tudo o que precisamos que um conjunto descreva são seus elementos únicos. As operações de “pertence” e “não pertence” são o que nos permite aplicar esse conceito de igualdade. Essas operações constituem as operações básicas mais importantes de conjuntos que você já deve ter utilizado, em Python, algumas vezes:

EX:

if element in colection:
    # ...

if element not in colection:
    # ...
    
* Agora vamos relembrar as demais operações sobre conjuntos. Entender as definições de cada operação ajuda a entender o resultado final, em cada caso, e ajudam a entender como são implementadas dentro da classe.

* União

Todos os elementos que pertencem a A ou a B

* Intersecção

Todos os elementos que pertencem a A e a B

* Diferença

Todos os elementos que pertencem a A e não pertencem a B

* Diferença Simétrica

Todos os elementos que pertencem exclusivamente a A ou a B

* Subconjunto

Não é uma operação. É qualquer conjunto em que todos os seus elementos pertencem ao conjunto maior (superconjunto). Conjunto vazio e o próprio conjunto são subconjuntos dele mesmo.

* Vamos ver dois casos em que conjuntos são utilizados:

Programa Educacional: imagine que, em um programa educacional, temos acesso ao log de quem já entregou a avaliação 1 e de quem já entregou a avaliação 2. Queremos saber quem já entregou a 1, mas não a 2. Para isso, podemos criar uma função que verifique se uma pessoa consta no log da avaliação 1, mas não consta nos logs da avaliação 2. Os nomes dos alunos nos logs formam um conjunto, pois não são duplicados e a ordem das entregas não importa. Qual operação sobre conjuntos você utilizaria para responder essa pergunta?

SQL: um cenário onde operações sobre conjuntos são pesadamente utilizados são queries em bancos de dados. O comando SELECT cria um conjunto e comandos como UNION, INTERSECT e EXCEPT nada mais são do que operações sobre conjuntos. O SELECT cria um conjunto com linhas únicas. Utilizar um comando de conjuntos sobre os resultados de dois ou mais SELECT implicarão em eliminação de duplicados e desconsideração da ordem. Esse artigo da Wikipedia explica melhor e dá exemplos. Entender o conceito dessas operações facilita entender qual será o resultado final da sua query.


# Formas de se representar conjuntos:

Ao implementar um conjunto, temos duas maneiras principais de se representá-lo: utilizando vetores e utilizando hashmaps.

Vamos utilizar os mesmo conjuntos A e B da seção anterior:

EX:

A = {1, 2, 3}
B = {2, 3, 4}

Observe que os elementos são números inteiros e pequenos, então podemos fazer uso dos índices de um vetor de booleanos para identificar a presença ou não de cada elemento:

* Vetor de Booleanos

Para saber se um elemento pertence ao conjunto, basta verificar se A[2] é True, por exemplo. O acesso direto aos endereços do vetor, consulta, inserção e remoção, ocorrem em O(1). Os lados negativos dessa implementação são:

Caso os elementos não sejam valores pequenos;

Caso os elementos sejam valores muito esparsos, como {1, 1000, 20000}. Dessa forma, teríamos muitos espaços subutilizados na memória;

Caso os elementos não sejam números.

* Conjuntos representados por Dict

Para os casos em que o vetor não se mostra uma boa solução, como por exemplo, contendo chaves sendo strings, podemos utilizar uma hashmap. Mapearíamos a string para o quê? Poderíamos mapear para qualquer coisa, uma vez que esses valores nunca serão acessados e estariam lá apenas porque a hash exige. Então vamos escolher valores booleanos, que ocupam pouco espaço.

EX:

A = {1, 2, 3}
# 0: False
# 1: True
# 2: True
# 3: True
# 4: False
# ...

Essa estratégia te lembra de algo? No vídeo da aula de hash utilizamos exatamente essa estratégia para identificar a intersecção entra a lista A e a lista B.

Vamos agora estudar como as operações sobre conjuntos são feitas por debaixo dos panos. Isso é importante por três motivos:

Para entender a complexidade das operações, precisamos saber como elas são realizadas;

Caso a linguagem com a qual estamos trabalhando não tenha uma representação dedicada. Ou seja, a linguagem não atende as nossas necessidades. Nesse caso teríamos que implementar as operações manualmente;

Em entrevistas de algoritmos (whiteboards), se o problema em questão for implementar uma classe Set, é evidente que nós não poderemos utilizar os métodos prontos. Teremos que saber implementar do zero. Observação: caso a estrutura de dados seja apenas auxiliar, não é necessário implementar do zero.


# A classe Set:

Implementamos uma classe Conjunto utilizando uma lista de booleanos. Vamos lembrar do caso em que usamos uma hashmap: em que situação mapearíamos a chave para False? Caso o elemento não esteja no conjunto, basta que ele não exista dentro da hashmap, certo? Estamos gastando espaço de memória à toa.

Por baixo dos panos, a classe Set é uma modificação da classe Dict e não um vetor de booleanos como fizemos. Ou seja, no fundo, o Set, é uma hashmap. Mas não é um simples mapeamento da chave para True; a classe Set não guarda valor nenhum, ou seja, não está exatamente replicando uma estrutura do tipo “chave-valor”, pois não há valor. Por isso, ocupa menos espaço do que um Dict, ao mesmo tempo em que mantém a eficiência das operações.

Set é uma coleção não ordenada de objetos imutáveis únicos. Por não se preocupar com a ordem, set não guarda a ordem de inserção e não é possível indexar elementos com [] como em listas ou Dicts. Assim como Dict, só é possível usar objetos imutáveis como chave. Mas Dict admite guardar valores, então é possível mapear chaves para Dicts. Mas set não guarda valores e é um objeto mutável, então não é possível guardar sets dentro de um set. Para resolver isso, existe o frozenset.


* Frozenset

Frozensets são objetos idênticos a set, porém são imutáveis; uma vez instanciados, não é possível adicionar ou remover elementos e todos os métodos que realizam essas duas operações estão indisponíveis no frozenset. Todos os demais métodos de set funcionam em um frozenset. Para criar sets de set, o elemento de dentro precisa ser um frozenset.

Nas próximas seções vamos conhecer as operações possíveis com set, algumas mais de um jeito de se fazer. Preocupe-se com saber as operações básicas e as típicas de Python. As demais, você pode consultar na documentação sempre que precisar. Mas você precisa saber que elas existem e por isso falaremos delas.

* Operações básicas

A classe Set oferece complexidade O(1) para as operações de inserção, remoção e consulta. Vamos conhecê-las:

EX:

# Podemos instanciar um set vazio ou inicializar com valores de um objeto
# iterável, como uma lista
conjunto_a = set()

# Ao inicializar com valores de uma lista, os valores duplicados serão
# desconsiderados e a ordem de inserção será perdida.
conjunto_b = set([1, 1, 2, 3, 3, 3])

# Add - adiciona o elemento ao conjunto
conjunto_a.add(5)
conjunto_a.add(3)
conjunto_a.add(0)

# sets admitem objetos mistos. Ou seja, admitem ter _strings_ com _ints_
# dentro de um mesmo objeto, por exemplo.
conjunto_a.add('elemento')

# Temos 2 jeitos de remover elementos:
# - remove() causa erro caso o elemento não esteja no set;
# - discard() não causa erro caso o elemento não esteja no set.

# Não vai dar erro
conjunto_b.remove(3)

# Vai dar erro pois já removemos esse elemento e set não guarda duplicatas
conjunto_b.remove(3)

# Não vai dar erro
conjunto_b.discard(3)

# Pop - remove e retorna um elemento aleatório do set
# - set é um objeto iterável, mas não conseguimos garantir em que ordem os
#   elementos serão acessados.
# - A função pop () é útil quando queremos trabalhar com algum elemento do
#   set, mas não sabemos de antemão quais elementos estão dentro dele.
some_element = conjunto_a.pop()

# clear() remove todos os itens do set
conjunto_b.clear()

# Consulta
# A consulta é feita com o operador "in"
if 2 in conjunto_a:
    print("2 está em A")

if 7 not in conjunto_a:
    print("7 não está em A")
    
    
* Operações que envolvem outro conjunto

As operações que envolvem outros conjuntos implementam todas as operações matemáticas que se aplicam a conjuntos. Vamos listar essas operações aqui mas podem ser consultadas na documentação sempre que necessário.

set.isdisjoint(other): retorna True se o set não tem nenhum elemento em comum com other, ou seja, se a intersecção é vazia;
set.issubset(other): verifica se set é um subconjunto de other, ou seja, se todo elemento de set está em other;
set.issuperset(other): verifica se set é um superconjunto de other, ou seja, se todos os elementos de other estão em set. A diferença de um superconjunto e de um subconjunto é que no superconjunto podem haver outros elementos, além dos elementos de other já presentes dentro de set. Já no subconjunto não;
set == other: verifica se os conjuntos são iguais, ou seja, se todos os elementos de set estão em other e se todos os elementos de other estão em set. Lembre-se que a ordem não importa. Não existe função dedicada para a comparação de igualdade.
Os métodos a seguir operam sobre dois ou mais conjuntos por vez. Cada uma das operações nessa seção tem a sua versão que modifica o set original com o resultado da operação e não retorna nada.

set.union(others): retorna a união entre o set e todos os other passados;
set.intersection(others): retorna a intersecção entre set e todos os other passados;
set.difference(others): retorna a diferença entre set e todos os other passados;
set.symmetric_difference(others): retorna todos os elementos que estejam em um mas não estejam no outro conjunto (opera apenas sobre dois conjuntos).

