#COOKIES:

- document.cookie          = serve para adicionar um arquivo no qual eu quero que seja salvo.
ex:
document.cookie = "email=pedropwks@gmail.com";       = vai armazenar o email.

- por padrão quando fechamos o navegador os cookies apagam, caso não queira isso, colocamos uma data no qual ela se expira.
ex:
document.cookie = "email=pedropwks@gmail.com; expires=Thu, 17 Dec 2020 12:00:00 UTC";       = fica armezanado até a data definida.

- também podemos adicionar o path, que indica qual o caminho do cookie que eu criei, por padrão vem da página atual, mas caso queira mudar usamos o "path".
ex:
document.cookie = "email=pedropwks@gmail.com; expires=Thu, 17 Dec 2020 12:00:00 UTC; path=/";

- console.log(variável que tem os cokkies)        = vai mostar as chaves e os valores do cookie.
ex:
let myCookies = document.cookie
console.log(myCookies)        =  email=pedropwks@gmail.com.

- caso queira excluir o cookie é só dar uma data que já se passou.

#CÓDIGOS:

- localStorage = salva no navegador do usuário, então essa informoção não se apaga, apenas se for literalmente lá e apagar. Os dados são sempre salvos no formato chave e valor e no tipo string. 

-console.log(localStorage.length); // não possui nada salvo, então o retorno é o valor: 0
-localStorage.setItem('firstname', 'Adam'); // salva uma entrada com a key = 'firstname' e value = 'Adam'
-localStorage.setItem('lastname', 'Smith'); // salva uma entrada com a key = 'lastname' e value = 'Smith'
-console.log(localStorage.getItem('lastname')); // retorna o valor 'Smith'
-console.log(localStorage.length); // possui duas entradas, então o retorno é o valor: 2
-localStorage.removeItem('lastname'); // remove a entrada referente a key = 'lastname'
-console.log(localStorage.length); // possui uma entrada, então o retorno é o valor: 1
-localStorage.clear(); // limpa todas as entradas salvas em localStorage
-console.log(localStorage.length); // não possui nada salvo, então o retorno é o valor: 0

- sessionStorage = esse fica salvo até quando a aba for fechada. Os dados são sempre salvos no formato chave e valor e no tipo string. 

console.log(sessionStorage.length); // não possui nada salvo, então o retorno é o valor: 0
sessionStorage.setItem('firstname', 'Adam'); // salva uma entrada com a key = 'firstname' e value = 'Adam'
sessionStorage.setItem('lastname', 'Smith'); // salva uma entrada com a key = 'lastname' e value = 'Smith'
console.log(sessionStorage.getItem('lastname')); // retorna o valor 'Smith'
console.log(sessionStorage.length); // possui duas entradas, então o retorno é o valor: 2
sessionStorage.removeItem('lastname'); // remove a entrada referente a key = 'lastname'
console.log(sessionStorage.length); // possui uma entrada, então o retorno é o valor: 1
sessionStorage.clear(); // limpa todas as entradas salvas em sessionStorage
console.log(sessionStorage.length); // não possui nada salvo, então o retorno é o valor: 0

- JSON.stringfy()    = caso queira transformar um item para o formato string.
ex:
const myObj = {
  name: 'Link',
  age: 20,
};

localStorage.setItem('myData', JSON.stringify(myObj));

// Como dito anteriormente, o `localStorage` armazena dados no formato chave e valor, sendo os valores sempre string. Para isso, precisamos passar como primeiro parâmetro do método `setItem()` o nome da chave, passamos `myData` e como segundo parâmetro, a função `JSON.stringify()` com o objeto-valor que queremos armazenar na chave `myData`. Feito isso, teremos salvo no `localStorage` um objeto com a chave `myData` e o valor `{ "name": "Link", "age": 20 }`.

- JSON.parse()      = desfazer e voltar ele para o formato original.

// Agora, precisamos recuperar o objeto armazenado, mas queremos ele no formato original e não como uma string. Para isso, utilizaremos a função `JSON.parse()`.

const recoveredObject = JSON.parse(localStorage.getItem('myData'));

// Utilizamos a função `JSON.parse()` para transformar a string que está armazenada no `localStorage` de volta para seu formato original, um objeto.

console.log(recoveredObject); // { name: 'Link', age: 20 }
