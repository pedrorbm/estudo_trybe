# Princípios do SOLID:

Nas definições originais, SOLID significa o seguinte:

Single responsibility principle (Princípio da responsabilidade única): uma entidade (classe, método, função, etc) deve ter apenas uma única responsabilidade;

Open/Closed principle (Princípio aberto/fechado): entidades de software devem ser abertas para extensão, mas fechadas para modificação;

Liskov substitution principle (Princípio de substituição de Liskov): objetos em um programa devem ser substituíveis por instâncias de seus subtipos, sem alterar a funcionalidade do programa; (Ah, não se assuste com esse nome, ele faz apenas uma referência à autora do paper que o descreveu pela primeira vez em 1994, Barbara Liskov)

Interface segregation principle (Princípio da segregação da interface): interfaces específicas são melhores do que uma única interface para todos os propósitos;

Dependency inversion principle (Princípio da inversão da dependência): entidades de alto nível não devem depender de entidades de baixo nível. Ambos devem depender de abstrações.

Cada letra tem seu significado e uma origem.

