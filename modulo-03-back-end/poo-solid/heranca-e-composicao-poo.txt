# HERANÇA E COMPOSIÇÃO POO

* Classe representa algo genérico, uma estrutura.
* Objeto é um elemento gerado nos moldes de uma classe.
* Atributo é uma variável no contexto de uma classe.
* Método é uma função no contexto de uma classe.
* Abstração é a não exibição do funcionamento interno da classe, de forma a simplificar a sua utilização.
* Encapsulamento é a disponibilização apenas dos atributos e métodos que são necessários para o bom uso da classe.

# HERANÇA E COMPOSIÇÃO  = herança que é a capacidade de especializar classes, de forma a atender objetivos mais específicos, e composição que é o uso de outras classes, delegando a elas atribuições específicas delas.

* herança  = O pilar herança permite que classes herdeiras de outras sejam criadas, de forma a herdar também seus métodos e atributos. Pense na classe Pessoa, com os atributos nome e altura e com o método sonhar. A partir dessa classe Pessoa, é possível criar uma classe herdeira dela, chamada PessoaCantora, que por herdar de Pessoa, terá automaticamente os atributos nome e altura e o método sonhar, mas poderá ter um método somente dela: cantar.

é importante salientar que herança é uma característica da classe e não do objeto. Ou seja, criamos uma classe que herda de outra e não um objeto que herda de outro.

A herança permite que classes mais específicas sejam criadas a partir de classes mais genéricas. Com isso podemos criar uma classe com o comportamento base, e estender os comportamentos de uma classe existente sem precisar modificá-la.

A classe base é denominada classe mãe ou superclasse, e a classe que estende dela é denominada classe filha ou subclasse.

Algo muito interessante é que, em todo lugar onde um objeto da superclasse é esperado, um objeto da subclasse pode ser passado, pois ele apresenta todos os atributos e métodos de um objeto da superclasse.

Abaixo é possível ver um exemplo visual de Herança entre classes. Note que o metodoA da classe Mae é acessível tanto na classe Filha quanto na classe Neta. Isso ocorre, pois a classe Neta herda o metodoA da classe Filha que por sua vez, herda o metodoA da classe Mae;





