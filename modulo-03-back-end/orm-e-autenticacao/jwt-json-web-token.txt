# JWT  = O JWT (JSON Web Token) √© um token gerado a partir de dados ‚Äúpessoais‚Äù que pode ser trafegado pela internet ao fazer requisi√ß√µes para APIs e afins. Mas aten√ß√£o: toda a informa√ß√£o que colocamos no JWT √© p√∫blica e qualquer pessoa com o token consegue ler essas informa√ß√µes. O mecanismo de seguran√ßa do JWT permite, no entanto, que apenas quem tem a senha consiga alterar as informa√ß√µes contidas em um token.

A coisa toda funciona assim:

O navegador solicita que o usu√°rio digite seu login e senha.
O navegador ent√£o envia esse login e senha ao servidor, para verificar que esses dados est√£o corretos.
Uma vez que valida login e senha, o servidor cria dois objetos: um contendo informa√ß√µes sobre o token que ser√° gerado, que chamamos de header, e outro contendo os dados do usu√°rio e as permiss√µes que aquela pessoa tem, ao qual chamamos de payload.
O servidor, ent√£o, converte esses dois objetos em JSON, junta-os em uma mesma string e utiliza um algoritmo chamado HMAC para ‚Äúcriptografar‚Äù essa string usando um ‚Äúsegredo‚Äù que s√≥ ele sabe, gerando o que chamamos de assinatura ‚Äì que nada mais √© do que header + payload criptografados.
Por fim, o servidor combina o header, o payload originais e a assinatura, criando assim o token.
O token √© enviado ao cliente, que o armazena para utiliz√°-lo nas pr√≥ximas requisi√ß√µes.
Chamamos de autentica√ß√£o o processo pelo qual a pessoa usu√°ria consegue, utilizando informa√ß√µes confidenciais como email e senha, efetuar login com sucesso em uma aplica√ß√£o, tendo como retorno um JSON Web Token que possibilita acessar suas permiss√µes de navega√ß√£o.

O resultado ter√° a seguinte estrutura:

(Header em base64).(Payload em base64).(Signature em base64)

Exemplo de resultado:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InVzZXIxIiwiZXhwIjoxNTQ3OTc0MDgyfQ.2Ye5_w1z3zpD4dSGdRp3s98ZipCNQqmsHRB9vioOx54

Nesse caso, temos:

Header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9

Payload: eyJ1c2VybmFtZSI6InVzZXIxIiwiZXhwIjoxNTQ3OTc0MDgyfQ

Signature: 2Ye5_w1z3zpD4dSGdRp3s98ZipCNQqmsHRB9vioOx54

* como instalar e usar o JWT:

* Para come√ßar, vamos instalar o pacote jsonwebtoken. Ele √© quem ser√° respons√°vel por gerar e validar os tokens para n√≥s:

EX:

npm install -E jsonwebtoken@9.0.0

* Agora, vamos editar o arquivo src/controllers/login.js. L√°, vamos trabalhar na gera√ß√£o do nosso JWT e adicionar os seguintes trechos de c√≥digo:

EX:

const jwt = require('jsonwebtoken');
const { UserService } = require('../services');

/* Sua chave secreta. √â com ela que os dados do seu usu√°rio ser√£o encriptados.
   Em projetos reais, armazene-a numa vari√°vel de ambiente e tenha cuidado com ela, pois s√≥ quem tem acesso
   a ela poder√° criar ou alterar tokens JWT. */
const secret = process.env.JWT_SECRET || 'seusecretdetoken';

const isBodyValid = (username, password) => username && password;

module.exports = async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!isBodyValid(username, password)) {
      return res.status(401).json({ message: '√â necess√°rio usu√°rio e senha para fazer login' });
    }

    const user = await UserService.getByUsername(username);

    if (!user || user.password !== password) {
      return res.status(401).json({ message: 'Usu√°rio n√£o existe ou senha inv√°lida' });
    }

    /* Criamos uma config b√°sica para o nosso JWT, onde:
    expiresIn -> significa o tempo pelo qual esse token ser√° v√°lido;
    algorithm -> algoritmo que voc√™ usar√° para assinar sua mensagem
                (lembra que falamos do HMAC-SHA256 l√° no come√ßo?). */

    /* A propriedade expiresIn aceita o tempo de forma bem descritiva. Por exemplo: '7d' = 7 dias. '8h' = 8 horas. */
    const jwtConfig = {
      expiresIn: '7d',
      algorithm: 'HS256',
    };

    /* Aqui √© quando assinamos de fato nossa mensagem com a nossa "chave secreta".
      Mensagem essa que cont√©m dados do seu usu√°rio e/ou demais dados que voc√™
      quiser colocar dentro de "data".
      O resultado dessa fun√ß√£o ser√° equivalente a algo como: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjozLCJ1c2VybmFtZSI6Iml0YWxzc29kaiIsInBhc3N3b3JkIjoic2VuaGExMjMifSwiaWF0IjoxNjM4OTc1MTMyLCJleHAiOjE2Mzk1Nzk5MzJ9.hnpmu2p61Il8wdQfmUiJ7wiWXgw8UuioOU_D2RnB9kY */
    const token = jwt.sign({ data: { userId: user.id } }, secret, jwtConfig);

    /* Por fim, n√≥s devolvemos essa informa√ß√£o ao usu√°rio. */
    res.status(200).json({ token });
  } catch (err) {
    return res.status(500).json({ message: 'Erro interno', error: err.message });
  }
};

* Feito isso, n√≥s j√° podemos nos autenticar de verdade, n√£o √© mesmo? Ao fazer uma nova requisi√ß√£o POST para /api/login, passando nome de usu√°rio e senha corretos, obtemos um resultado semelhante ao seguinte:

EX:

{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InVzZXJJZCI6MX0sImlhdCI6MTY1NjYxNjQyMiwiZXhwIjoxNjU3MjIxMjIyfQ.wfmRCMvD-tv0v1O14UwaOgeye3ezEUkBMWr6M_b6Bhw"
}

Eis o nosso token! √â ele que vamos ficar transitando pra l√° e pra c√°, ent√£o ele precisa ser guardado! Mas caso ele seja perdido, n√£o se preocupe; √© s√≥ gerar outro token. üôÇ

* Agora temos que usar esse token de alguma forma, n√£o √© mesmo? Para isso, vamos criar uma pasta chamada auth dentro do diret√≥rio src e, dentro dela, um arquivo chamado validateJWT.js.

Esse arquivo conter√° uma fun√ß√£o que ser√° usada como middleware para as nossas requisi√ß√µes, validando todas as rotas em que n√≥s solicitarmos autentica√ß√£o.

EX:

// src/auth/validateJWT.js
const jwt = require('jsonwebtoken');

const { UserService } = require('../services');

/* Mesma chave privada que usamos para criptografar o token.
   Agora, vamos us√°-la para descriptograf√°-lo.
   Numa aplica√ß√£o real, essa chave jamais ficaria hardcoded no c√≥digo assim,
   e muitos menos de forma duplicada, mas aqui s√≥ estamos interessados em
   ilustrar seu uso ;) */
const secret = process.env.JWT_SECRET || 'seusecretdetoken';

/* Esta fun√ß√£o extrai o token da string "Bearer ..."
   recebida pela requisi√ß√£o do login */
function extractToken(bearerToken) {
  return bearerToken.split(' ')[1];
}

module.exports = async (req, res, next) => {
  /* Aquele token gerado anteriormente vir√° na requisi√ß√£o atrav√©s do
     header Authorization em todas as rotas que queremos que
     sejam autenticadas. */
  const bearerToken = req.header('Authorization');

  /* Caso o token n√£o seja informado, simplesmente retornamos
     o c√≥digo de status 401 - n√£o autorizado. */
  if (!bearerToken) {
    return res.status(401).json({ error: 'Token n√£o encontrado' });
  }

  /* Utilizamos a fun√ß√£o para extrair o token */
  const token = extractToken(bearerToken);

  try {
    /* Atrav√©s o m√©todo verify, podemos validar e decodificar o nosso JWT. */
    const decoded = jwt.verify(token, secret);
    /*
      A vari√°vel decoded ser√° um objeto equivalente ao seguinte:
      {
        data: {
          userId: 1
        },
        iat: 1656616422,
        exp: 1657221222
      }
    */

    /* Caso o token esteja expirado, a pr√≥pria biblioteca ir√° retornar um erro,
       por isso n√£o √© necess√°rio fazer valida√ß√£o do tempo.
       Caso esteja tudo certo, n√≥s ent√£o usamos o servi√ßo de usu√°rio para obter seus dados atualizados */

    const user = await UserService.getByUserId(decoded.data.userId);

    /* N√£o existe um usu√°rio na nossa base com o id informado no token. */
    if (!user) {
      return res.status(401).json({ message: 'Erro ao procurar usu√°rio do token.' });
    }

    /* O usu√°rio existe! Colocamos ele em um campo no objeto req.
       Dessa forma, o usu√°rio estar√° dispon√≠vel para outros middlewares que
       executem em sequ√™ncia */
    req.user = user;

    /* Por fim, chamamos o pr√≥ximo middleware que, no nosso caso,
       √© a pr√≥pria callback da rota. */
    next();
  } catch (err) {
    return res.status(401).json({ message: 'Token inv√°lido' });
  }
};

De olho na dica üëÄ: Perceba que no nosso middleware utilizamos a fun√ß√£o extractToken √© porque no momento em que precisarmos fazer uma requisi√ß√£o a API inserimos a palavra Bearer antes do nosso token. Este termo √© um padr√£o que identifica o tipo do token que est√° sendo enviado. Consulte a documenta√ß√£o para mais informa√ß√µes.

* No arquivo src/app.js, onde definimos as rotas, usamos esse middleware para adicionar autentica√ß√£o na nossa rota de listagem de posts.

EX:

// const express = require('express');
// const routes = require('./routes');

/* Aqui, importamos nossa fun√ß√£o que valida se o usu√°rio est√° ou n√£o autenticado */
const validateJWT = require('./auth/validateJWT');

// const app = express();

// app.use(express.json());

// const apiRoutes = express.Router();

apiRoutes.get('/api/posts', validateJWT, routes.getPosts);
// apiRoutes.post('/api/users', routes.createUsers);
// apiRoutes.get('/api/users', routes.getUsers);
// apiRoutes.post('/api/login', routes.login);

// app.use(apiRoutes);

// module.exports = app;

Note que n√£o queremos autenticar o login e nem cria√ß√£o de usu√°rios, pois precisamos deles para o processo de autentica√ß√£o! Se houvesse outras rotas protegidas na nossa aplica√ß√£o, usar√≠amos o middleware nelas tamb√©m!

Agora que j√° estamos logados, vamos requisitar nossos posts!

Requisitando Posts implementando jwt
Requisitando Posts!
Requisi√ß√£o n√£o autorizada implementando jwt
Requisi√ß√£o n√£o autorizada!
Voc√™ deve estar pensando: u√©! J√° fizemos o login, ent√£o, por que n√£o podemos pegar os posts? Olhe com mais aten√ß√£o para a resposta da API. Ela est√° dizendo que o token n√£o foi informado. N√≥s conseguimos um token atrav√©s do endpoint de login, mas n√£o fizemos nada com ele. Nesse caso, vamos mandar o token para a API via Headers, que s√£o informa√ß√µes extras que podemos passar em uma requisi√ß√£o.

Enviando token via Headers implementando jwt 
Enviando token via Headers!
Adicionamos um header chamado Authorization porque √© o que nosso middleware espera. Se n√£o se lembra, d√™ uma olhada de novo no arquivo src/auth/validateJWT.js.

* Feito isso, √© s√≥ mandar bala na requisi√ß√£o e ser feliz!

EX:

{
  "mockPosts": [
    {
      "title": "titulo fake",
      "content": "conteudo conteudo conteudo conteudo conteudo "
    },
    {
      "title": "titulo fake",
      "content": "conteudo conteudo conteudo conteudo conteudo "
    },
    {
      "title": "titulo fake",
      "content": "conteudo conteudo conteudo conteudo conteudo "
    },
    {
      "title": "titulo fake",
      "content": "conteudo conteudo conteudo conteudo conteudo "
    }
  ]
}

Voltamos a conseguir recuperar nossos posts. Mas, antes de terminarmos, um √∫ltimo coment√°rio sobre nossa API: voc√™ notou que nossos posts s√£o fake e s√£o sempre os mesmos, independente do usu√°rio logado, certo? Numa API real, buscar√≠amos esses posts de um banco de dados, por exemplo. Mas como far√≠amos para recuperar apenas os posts do usu√°rio logado?

Lembra-se de que o middleware de autentica√ß√£o recupera o usu√°rio do banco de dados e o coloca no req? Esse objeto √© o mesmo que √© passado para todos os middlewares e para a callback da rota.

* Como o middleware de autentica√ß√£o √© executado antes das fun√ß√µes dos controllers, req conter√° o usu√°rio logado quando o controller em src/controllers/posts for executado, e poder√≠amos utiliz√°-lo para fazer uma consulta ao banco de dados que trouxesse somente seus posts. Para confirmar isso, basta colocar um console.log dentro do controller:

EX:

const { PostService } = require('../services');

module.exports = async (req, res) => {
  console.log(req.user.dataValues);
  const posts = await PostService.getPosts(req);
  res.status(200).json({ mockPosts: posts });
};

* Voc√™ dever√° ver algo assim, no terminal onde executou a API:

EX:

{
  id: 3,
  username: 'italssodj',
  password: 'senha123'
}



