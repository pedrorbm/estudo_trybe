# PARA INSTALAR O MOCHA E O CHAI:
npm install mocha@8.4.0 chai@4.3.4 --save-dev --save-exact

* ESTRUTURA DE UM TESTE:

EX:
const { expect } = require('chai');

const calculaSituacao = require('../examples/calculaSituacao');

describe('Quando a m√©dia for menor que 7', function () {
  it('retorna "reprova√ß√£o"', function () {
    const resposta = calculaSituacao(4);

    expect(resposta).to.be.equals('reprova√ß√£o');
  });
});
*OBS: PELA DOCUMENTA√á√ÉO O CERTO √â USAR UMA FUNCTION E N√ÉO UMA ARROW FUNCTION.

* PARA RODAR O TESTE TEM QUE COLOCA O SEGUINTE COMANDO NOS SCRIPTS:
"test": "mocha src/*.test.js --exit"  = no meio coloca onde est√° seus testes e no final √© para quando terminar de executtar os testes ele encerre.

# PARA FAZER OS TESTES USANDO O GET, POST, PUT OU DELETE PRECISA DO CHAI E PARA INSTALAR √â O COMANDO:
npm install chai-http@4.3.0 --save-dev --save-exact

* DEPOIS DE INSTALAR PARA IMPLEMENTAR:
const chaiHttp = require('chai-http');

chai.use(chaiHttp);  = precisa usar esse comando para ter acesso as requisi√ß√µes http.

* criar a pasta "tests" fora de "src" e dentro da pasta tests criar a pasta "integration" para sinalizar que ali se encontra testes de integra√ß√£o.

EX: DE UM TESTE COMPLETO

// tests/integration/chocolates.test.js

const chai = require('chai');
const chaiHttp = require('chai-http');

const { expect } = chai;

chai.use(chaiHttp);

describe('Testando a API Cacau Trybe', function () {
  describe('Usando o m√©todo GET em /chocolates', function () {
    it('Retorna a lista completa de chocolates!', async function () {
      const output = [
        { id: 1, name: 'Mint Intense', brandId: 1 },
        { id: 2, name: 'White Coconut', brandId: 1 },
        { id: 3, name: 'Mon Ch√©ri', brandId: 2 },
        { id: 4, name: 'Mounds', brandId: 3 },
      ];

      const response = await chai
        .request(app)
        .get('/chocolates');
      expect(response.status).to.be.equal(200);
      expect(response.body.chocolates).to.deep.equal(output);
    });
  });
});

Voltando ao cen√°rio de teste, n√≥s ainda precisamos especificar a sa√≠da esperada para esse teste. Para isso, vamos recordar o contrato estabelecido para a rota /chocolates:

üëâ GET /chocolates

Objetivo: Retornar uma lista com todos os chocolates cadastrados.
C√≥digo HTTP: 200 - OK;
Body (exemplo):
Copiar
  [
    { "id": 1, "name": "Mint Intense", "brandId": 1 },
    { "id": 2, "name": "White Coconut", "brandId": 1 },
    { "id": 3, "name": "Mon Ch√©ri", "brandId": 2 },
    { "id": 4, "name": "Mounds", "brandId": 3 }
  ]
N√≥s iremos dividir a valida√ß√£o desse contrato em duas partes usando o expect.

Na primeira parte, iremos verificar se o c√≥digo HTTP retornado corresponde ao valor esperado:
Copiar
 expect(response.status).to.be.equals(200);
Em seguida, validamos se o corpo da mensagem corresponde a lista com todos os chocolates cadastrados na API:

Copiar
const output = [
  { id: 1, name: 'Mint Intense', brandId: 1 },
  { id: 2, name: 'White Coconut', brandId: 1 },
  { id: 3, name: 'Mon Ch√©ri', brandId: 2 },
  { id: 4, name: 'Mounds', brandId: 3 },
];
expect(response.body.chocolates).to.deep.equal(output);
Voc√™ pode estar se perguntando: ‚ÄúPor que utilizamos o comando to.deep.equal ao inv√©s do to.be.equals?‚Äù ü§î

Resposta: Nesse caso, precisamos utilizar o deep para garantir que todas as informa√ß√µes dentro do objeto retornado s√£o as mesmas do objeto esperado. Do outro modo, essa valida√ß√£o n√£o seria poss√≠vel, pois n√£o seria realizada a compara√ß√£o em profundidade.

# SINON  = utilizado para mocks de api

* primeiramente vamos instalar o sinon.

npm install sinon@11.1.1 --save-dev --save-exact

* agora √© s√≥ importar o sinon no arquivo e fazer os testes usando o "stub" √© ele que vai testar a fun√ß√£o e retornar o mock (LEMBRANDO QUE √â BOM USAR O AFTEREACH E BEFOREEACH).

EX:

// tests/integration/chocolates.test.js

// const chai = require('chai');
const sinon = require('sinon');
// const fs = require('fs');
// const chaiHttp = require('chai-http');
// const app = require('../../src/app');

// const { expect } = chai;

// chai.use(chaiHttp);

// const mockFile = JSON.stringify({
//   ...

describe('Testando a API Cacau Trybe', function () {
  beforeEach(function () {
    sinon.stub(fs.promises, 'readFile')
      .resolves(mockFile);
  });

  afterEach(function () {
    sinon.restore();
  });

  describe('Usando o m√©todo GET em /chocolates', function () {
    it('Retorna a lista completa de chocolates!', async function () {
      const output = [
        { id: 1, name: 'Mint Intense', brandId: 1 },
        { id: 2, name: 'White Coconut', brandId: 1 },
        { id: 3, name: 'Mon Ch√©ri', brandId: 2 },
        { id: 4, name: 'Mounds', brandId: 3 },
      ];

      const response = await chai
        .request(app)
        .get('/chocolates');
      expect(response.status).to.be.equal(200);
      expect(response.body.chocolates).to.deep.equal(output);
    });
  });
});

EX:

// tests/integration/chocolates.test.js

//describe('Testando a API Cacau Trybe', function () {

//...

describe('Usando o m√©todo GET em /chocolates/:id para buscar o ID 4', function () {
    it('Retorna o chocolate Mounds', async function () {
      const response = await chai
        .request(app)
        .get('/chocolates/4');

      expect(response.status).to.be.equal(200);
      expect(response.body.chocolate).to.deep.equal(
        {
          id: 4,
          name: 'Mounds',
          brandId: 3,
        });
    });
  });

  describe('Usando o m√©todo GET em /chocolates/:id para buscar o ID 99', function () {
    it('Retorna status 404 com a mensagem "Chocolate not found"', async function () {
      const response = await chai
        .request(app)
        .get('/chocolates/99');

      expect(response.status).to.be.equal(404);
      expect(response.body).to.deep.equal({ message: 'Chocolate not found' })
    });
  });

  describe('Usando o m√©todo GET em /chocolates/brand/:brandId para buscar brandId 1', function () {
    it('Retorna os chocolates da marca Lindt & Sprungli', async function () {
      const response = await chai
        .request(app)
        .get('/chocolates/brand/1');

      expect(response.status).to.be.equal(200);
      expect(response.body.chocolates).to.deep.equal([
        {
          id: 1,
          name: 'Mint Intense',
          brandId: 1,
        },
        {
          id: 2,
          name: 'White Coconut',
          brandId: 1,
        },
      ]);
    });
  });
//});


