# ADICIONAR O EXPRESS NO PROJETO

EX:
- primeiro instalar o pacote com o c√≥digo:
npm install express

- depois exportar ele em um arquivo separado:
const express = require('express');

const app = express();

module.exports = app;

* .listen  = √© o que d√° o start na aplica√ß√£o e dentro dele podemos passar at√© 2 par√¢metros. Primeiro par√¢metro √© o port (ou porta): Aqui passamos 3001, mas poderia ser qualquer n√∫mero n√£o utilizado acima de 1023, segundo par√¢metro √© uma fun√ß√£o: Aqui passamos apenas um console.log exibindo uma mensagem ‚Äúque estamos no ar‚Äù;

EX:
const app = require('./app');

app.listen(3001, () => console.log('server running on port 3001'));

* nodemon  = ele faz com que qualquer altera√ß√£o no servidor j√° atualize automaticamente.
- para instalar ele:
npm i nodemon@2.0.15 --save-dev --save-exact

- adicionar ele no script para executar:
"dev": "nodemon src/server.js"

- agora s√≥ executar o comando:
npm run dev

* rota  = uma rota √© a parte de uma URL que usamos para acessar uma API e fazer uma requisi√ß√£o a ela.

* .get  = Dentro da constante app, temos v√°rios recursos, um deles √© a fun√ß√£o get. Usamos essa fun√ß√£o toda vez que queremos pedir algum dado.

Observe que a fun√ß√£o get recebe dois par√¢metros:

1¬∞ par√¢metro '/': Aqui √© rota que tanto falamos. Podem ser /login, /produtos, /pessoas, ou qualquer outra coisa! Neste caso, colocamos apenas /.
Chamamos a rota / de rota raiz;

2¬∞ par√¢metro (req, res) => {}: Este espera uma fun√ß√£o de callback. Esta fun√ß√£o pode receber de 2 a 4 par√¢metros, sendo eles:
req: Essa √© a Request (ou requisi√ß√£o), √© por meio dela que recebemos os dados (envio por query, params e body);
res: Essa √© a Response (ou resposta), √© por meio dela que respondemos o que nos √© solicitado;
next: N√£o vamos trabalhar com ele nesta aula;
err: N√£o vamos trabalhar com ele nesta aula.
Essa fun√ß√£o √© respons√°vel por responder nossas requisi√ß√µes. Ent√£o, observe o trecho res.status(200).json({ message: 'Ol√° Mundo!' }) e reflita sobre o que cada coisa deve significar.

res como comentado, responde as requisi√ß√µes. Estas requisi√ß√µes podem ser respondidas de v√°rios jeitos, tais como:
Formato text/JSON, como o caso do res.json({ message: 'Ol√° Mundo!' });
Formato text/HTML, como o caso do res.send('<h1>Ol√° Mundo!</h1>');
Redirecionamentos, como o caso do res.redirect('https://www.betrybe.com/');
P√°ginas completas ou partes dela, como o caso do res.render('index.html');
Finalizando, como o caso do res.end();
‚ö†Ô∏è Aviso: Vamos usar apenas o formato JSON por enquanto.

√â de costume enviar um status code, como √© demostrado no trecho res.status(200).... Estes status code s√£o importantes para identificarmos o que est√° acontecendo com nossas requisi√ß√µes, mas n√£o se preocupe em decor√°-los, com o tempo voc√™ vai aprendendo a us√°-los e, se tiver d√∫vidas, pode consultar a documenta√ß√£o do MDN.

Os status code mais conhecidos s√£o:

200: Que quer dizer ‚Äòok‚Äô;
500: Que quer dizer erro no servidor;
404: Este muitas pessoas j√° viram, ele quer dizer que a p√°gina n√£o foi encontrada;
De olho na dica üëÄ: associe os status a constantes nomeadas, desse modo voc√™ facilita a leitura! const OK = 200, const INTERNAL_SERVER_ERROR = 500 e const NOT_FOUND = 404 s√£o √≥timos come√ßos!

- tipos de request ou req = Envio por consulta, ou req.query
Quando pesquisamos algo no Google, usamos esse m√©todo!

Constru√ß√£o: /rota?variavel1=valor&variavel1=valor&variavelN=valor
Explica√ß√£o:
/rota √© o caminho, por exemplo, /produtos, /pessoas, /pesquisa, ‚Ä¶;
? √© o indicador que vamos passar dados em para a rota;
& √© o separador que se usa quando queremos enviar muitos dados;
variavelN √© uma chave identificadora, por exemplo, nome, frequenciaMinima, q, ‚Ä¶;
valor √© o valor da vari√°vel, por exemplo, nome=Tobias, frequenciaMinima=144, q=express, ‚Ä¶;
‚è∞ Hora da pr√°tica: Experimente pesquisar alguma coisa no Google e observe a mudan√ßa na URL, por exemplo: https://www.google.com.br/search?q=Express. Quando n√≥s pesquisamos algo, a URL recebe a rota /search e o par√¢metro q com o valor pesquisado (aqui no caso foi a palavra Express).

Essa √© uma requisi√ß√£o GET üòâ

* Envio por par√¢metro ou req.params
Esse exemplo √© mais vis√≠vel em e-commerces ou sites que t√™m produtos cadastrados.

Constru√ß√£o: /rota/:variavelN
Explica√ß√£o:
/rota √© o caminho, por exemplo, /produto, /pessoa,, ‚Ä¶;
/: √© o indicador que vamos passar um dado para a rota;
variavelN √© uma chave identificadora, por exemplo, id, ‚Ä¶; (aqui geralmente passamos ids mas n√£o se restringe a isso)
Um exemplo pr√°tico √© quando usamos algum site de compras para ver as informa√ß√µes do produto, vamos usar o site da Kabum por exemplo: https://www.kabum.com.br/produto/117767/. Quando n√≥s entramos para ver mais detalhes de um produto, a URL recebe a rota /produto e o par√¢metro 117767 que √© o id deste produto.

Como o envio anterior, essa tamb√©m √© uma requisi√ß√£o GET. üòâ

* Envio por corpo ou req.body
Este exemplo n√≥s n√£o vemos na barra de endere√ßos, mas usamos muito!

Sabe quando preenchemos um formul√°rio de pagamento ap√≥s uma compra online ou entramos no course com nosso e-mail e senha? A√≠ est√° o envio de informa√ß√µes pelo corpo da requisi√ß√£o.

O envio de informa√ß√µes vai pelo corpo e n√£o mais pela URL, onde podemos ver explicitamente‚Ä¶ Isso se d√° por duas quest√µes:

A primeira √© por seguran√ßa, que √© a mais importante! Imagine sua senha ou c√≥digo de seguran√ßa do seu cart√£o de cr√©dito escritos na URL do seu computador e quem est√° perto de voc√™ podendo ler. üò±

O segundo motivo √© pelo tamanho do que enviamos. Imagina que invi√°vel enviar todo um cadastro de um formul√°rio gigante pela URL! üòÅ

Tamb√©m chamamos esse envio de envio tipo POST. Vamos aprofundar nele logo mais! üòâ

EX:
app.get('/', (req, res) => res.status(200).json({ message: 'Ol√° Mundo!' }));  = vai aparecer no meu navegador (localhost:porta_escolhida_no_server) o objeto { "message":"Ol√° Mundo!" }

OBS: LEMBRAR DE USAR O SEGUINTE C√ìDIGO PARA TER EFEITO USANDO O BODY: (app.use(express.json());)

* .post  = para inseir algo.

EX:
app.post('/sum/:id', (req, res) => {
  console.log(req.params.id);
  res.status(200).json({ message: 'Ol√° Mundo!' });
});

EX:
app.post('/teams', (req, res) => {
  const newTeam = { ...req.body };
  teams.push(newTeam);

  res.status(201).json({ team: newTeam });
});

* .put = alterar algo.

EX:
app.put('/teams/:id', (req, res) => {
  const { id } = req.params;
  const { name, initials } = req.body;

  const updateTeam = teams.find((team) => team.id === Number(id));

  if (!updateTeam) {
    res.status(404).json({ message: 'Team not found' });
  }

  updateTeam.name = name;
  updateTeam.initials = initials;
  res.status(200).json({ updateTeam });
});

* .delete = para excluir algo.

EX:
app.delete('/teams/:id', (req, res) => {
  const { id } = req.params;
  const arrayPosition = teams.findIndex((team) => team.id === Number(id));
  teams.splice(arrayPosition, 1);

  res.status(200).end();
});

* REST √© um conjunto de boas pr√°ticas utilizadas durante a constru√ß√£o de uma API;

* RESTful √© um servi√ßo web (desenvolvido por n√≥s ou n√£o) que segue as regras definidas pelo REST;

* SEQU√äNCIA A SER RESPEITADA PELO CRUD(Create: Criar; Read: Ler; Update:Alterar; Delete: Deletar;):
app.get(...)
app.post(...)
app.put(...)
app.delete(...)
