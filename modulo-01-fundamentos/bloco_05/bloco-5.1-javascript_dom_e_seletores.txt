#DOM:

- window: janela que tem o DOM, é a porta de entrada.
Representa uma janela que contém um elemento DOM, sendo possível acessar o documento que a janela contém através de Window

- location: é o local que o documento se encontra.
Representa a localização do objeto a qual ele está associado, isso é, o documento atual.

- document: é a página carregada na web, é nele que contém todos os documentos HTML, ou seja tem acesso a todo o arquivo HTML da página.
Representa qualquer página da web carregada no navegador e serve como um ponto de entrada para o conteúdo na página da web, sendo assim o document contém todos os documentos HTML.

- history: é o histórico de tudo que foi feito naquele guia que o site está aberto.
Permite a manipulação do histórico da sessão do navegador, ou seja, as páginas visitadas na guia ou quadro em que a página atual está carregada.

- element: é onde fica todas as tags do arquivo HTML.
É a classe base mais geral da qual todos os objetos em um Document herdam, isso é, são todas as tags que estão em arquivos HTML e se transformam em elementos da árvore DOM.

- text: são todos os conteúdos das tags.
Texto que vai entre os elementos, é todo o conteúdo das tags.

- atribute: é a classe e o id, que uma tag possui.
São todos os atributos que um nó específico possui, como uma class ou id.

#CÓDIGOS, JÁ PODE INCREMENTAR FOR E OUTROS APRENDIZADOS DE JAVASCRIPT:

- document: ele serve para dar acesso a qualquer conteúdo que esteja no HTML.
ex: console.log(document.getElementById("teste")    = vai retornar no console da web, todas as linhas de código do arquivo HTML que tem o ID definido como "teste".

- getElementById()     = busca as tags com o id definido.
ex:
console.log(element.getElementById(id definido)) = serve para mostrar todas as linhas de código do id ou classe definido.

- .innerHTML  = retorna apenas o conteúdo dentro do id ou classe, o valor.
ex: 
console.log(element.getElementById(id definido).innerHTML)   = mostra o valor contido no id ou classe definido, se fosse um paragrafo ou h1, qualquer tag iria mostrar o conteúdo contido neles.

- .innerText   = mostra apenas o texto puro, filtrando as tags.
ex:
console.log(element.getElementById(id ou clase definido).innerText);

* caso ele seja usado sem console.log, serve para alterar o conteúdo da tag.
ex:
document.getElementById(id definido).innerText; = "texto que quero mudar"    = ele vai trocar o conteúdo que estava definido para a tag selecionada no HTML, para o conteúdo que acabei de escrever.

- .style    = mostra todo o conteudo do css aplicado na tag.

- getByElementsClassName()    = busca todas as tags com a classe definida e mostra em formnato de lista.
ex:
document.getElementsByClassName(clase definida)[0].innerText = "o que eu quero que apereça"     = vai alterar a primeira classe, pois está na posição 0 e o getElementsByClassName retorna em formato de lista ou seja de array.

- getElementsByTagName()      = busca todos os códigos que tem a tag procurada.
ex:
document.getElementsByTagName(nome da tag)[0].innerText = "É isso ai"      = vai mudar o texto que está no indice 0 da tag procurada, ou seja a primeira. 

- .querySelector()      = retorna apenas o primeiro elemento e trabalha com CSS. (trabalha com seletores de CSS, pq quando é um id ou classe, usa a # ou . e acessar conteúdos filhos para se identificar.)
ex:
document.querySelector("#id ou .class ou tag")     = retorna a primeira que tiver o id ou classe ou tag selecionado, apenas retorna a primeira.

- .querySelectorAll()       = retorna todos os elementos do que foi escolhido, trabalha com seletores CSS, mostrando em forma de lista. (trabalha com seletores de CSS, pq quando é um id ou classe, usa a # ou . e acessar conteúdos filhos para se identificar.)
ex:
document.querySelectorAll("#id ou .class ou tag")       = retorna todas do que for selecionado.
document.querySelectorAll("header h2")          = retorna o que tem em h2, que está dentro de header.
document.querySelectorAll(".juntos .lol")        = retorna todas as classes lol que estão dentro da classe juntos.
